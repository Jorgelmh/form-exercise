{"version":3,"sources":["FormInput.ts","components/InputContainer/styles.ts","components/InputContainer/index.tsx","components/TextInput/index.tsx","components/SelectInput/index.tsx","components/Preview/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Thread","StyledContainer","styled","div","InputContainer","props","data-aos","children","TextInput","style","marginTop","fontSize","className","name","paddingTop","type","onChange","handleUpdate","value","disabled","submit","onClick","handleNext","message","margin","SelectInput","useEffect","element","Low","document","getElementById","Medium","High","checked","marginBottom","id","handlePrevious","Preview","input","back","email","thread","App","useState","state","setState","setSubmit","setInput","handleChange","e","target","length","match","onNext","AOS","init","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ba9fa38c.chunk.js","sourcesContent":["/**\r\n *  ============================\r\n *        LEVEL OF THREAT\r\n *  ============================\r\n */\r\nexport enum Thread {Low = 'Low', Medium = 'Medium', High =' High'}\r\n\r\n/**\r\n *  ============================\r\n *      MODEL FORM DATA\r\n *  ============================\r\n */\r\nexport default interface FormInput{\r\n    name: string,\r\n    email: string,\r\n    thread: Thread | null\r\n}","import styled from 'styled-components'\r\n\r\nexport const StyledContainer = styled.div`\r\n    width: 350px;\r\n    display: block;\r\n    margin: auto;\r\n    border-radius: 10px;\r\n    padding: 40px;\r\n    margin-top: 20vh;\r\n    background-color: white;\r\n    box-shadow: 3px 3px 23px -5px rgba(0,0,0,0.71);\r\n`","import React, {useState} from 'react'\r\nimport { StyledContainer } from './styles'\r\n\r\n/**\r\n *  ============================\r\n *       INPUT CONTAINER\r\n *  ============================\r\n * \r\n *  Styles for every input field\r\n */\r\nconst InputContainer: React.FC = (props) => {\r\n    return (\r\n        <StyledContainer data-aos=\"zoom-in\">\r\n            {props.children}\r\n        </StyledContainer>\r\n    )\r\n}\r\n\r\nexport default InputContainer","import React, { useEffect } from 'react'\r\nimport Props from './types'\r\n\r\n/**\r\n *  =======================\r\n *       TEXT FIELD\r\n *  =======================\r\n */\r\n\r\nconst TextInput: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{marginTop: 0, fontSize: '2.4rem'}}>What is your <span className='input-title'>{props.name}</span>?</h1>\r\n            <div className='d-flex justify-content-between' style={{paddingTop: '40px'}}>\r\n                <input name={props.name} type='text' onChange={props.handleUpdate} value={props.value} />\r\n                <button className=\"btn btn-primary\" disabled={!props.submit} onClick={props.handleNext}>Next</button>\r\n            </div>\r\n            {props.message && <p style={{fontSize: '.8rem', paddingTop: '15px', margin: 0}}>{props.message}</p>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextInput","import React, { useEffect } from 'react'\r\nimport Props from './types'\r\nimport {Thread} from  '../../FormInput'\r\n\r\n/**\r\n *  =====================\r\n *      RADIO BUTTONS\r\n *  =====================\r\n */\r\nconst SelectInput: React.FC<Props> = (props) => {\r\n\r\n    useEffect(() => {\r\n        \r\n        if(!props.value)\r\n            return\r\n\r\n        /* Radio button element */\r\n        let element: HTMLInputElement\r\n\r\n        switch (props.value) {\r\n            case Thread.Low:\r\n                element =  document.getElementById('low-thread') as HTMLInputElement\r\n                break;\r\n        \r\n            case Thread.Medium:\r\n                element = document.getElementById('medium-thread') as HTMLInputElement\r\n                break;\r\n            \r\n            case Thread.High:\r\n                element = document.getElementById('high-thread') as HTMLInputElement\r\n                break\r\n        }\r\n\r\n        if(element)\r\n            element.checked = true\r\n\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{fontSize: '1.6rem', marginBottom: '40px'}}>What level of <span className='input-title'>{props.name}</span> are you reporting?</h1>\r\n            <div id='thread-levels'>\r\n                <div className=\"form-check\">\r\n                    <input id='low-thread' type=\"radio\" name={props.name} value={Thread.Low} onChange={props.handleUpdate} />\r\n                    <label>Low</label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                    <input id='medium-thread' type=\"radio\" name={props.name} value={Thread.Medium} onChange={props.handleUpdate} />\r\n                    <label>Medium</label>\r\n                </div>\r\n                \r\n                <div className=\"form-check\">\r\n                    <input id='high-thread' type=\"radio\" name={props.name} value={Thread.High} onChange={props.handleUpdate} />\r\n                    <label>High</label>\r\n                </div>\r\n            </div>\r\n            <div className='d-flex justify-content-between' style={{paddingTop: '20px'}}>\r\n                <button className=\"btn btn-primary\" onClick={props.handlePrevious} >Previous</button>\r\n                <button className=\"btn btn-primary\" disabled={!props.submit} onClick={props.handleNext}>Next</button> \r\n            </div>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default SelectInput","import React, { useEffect } from 'react'\r\nimport Props from './types'\r\n\r\nconst Preview: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <h1 className='input-title' style={{marginBottom: '40px'}}>Preview</h1>\r\n            <div className='d-flex justify-content-between preview-input'>\r\n                <p><span className='input-title'>Name: </span> {props.input.name}</p>\r\n                <button className='btn btn-primary' onClick={() => props.back(0)}><i className=\"fas fa-wrench\"></i></button>\r\n            </div>\r\n            <div  className='d-flex justify-content-between preview-input'>\r\n                <p><span className='input-title'>Email: </span> {props.input.email}</p>\r\n                <button className='btn btn-primary' onClick={() => props.back(1)}><i className=\"fas fa-wrench\"></i></button>\r\n            </div>\r\n            <div className='d-flex justify-content-between preview-input'>\r\n                <p><span className='input-title'>Thread: </span> {props.input.thread}</p>\r\n                <button className='btn btn-primary' onClick={() => props.back(2)}><i className=\"fas fa-wrench\"></i></button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Preview","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport FormInput, {Thread} from './FormInput'\nimport InputContainer from './components/InputContainer'\nimport TextInput from './components/TextInput'\nimport SelectInput from './components/SelectInput'\nimport Preview from './components/Preview'\nimport 'aos/dist/aos.css'\nimport AOS from 'aos'\n\n/**\n *  ==========================\n *          HOMEPAGE\n *  ==========================\n * \n *  It'll work as a container for every input field\n */\nconst App = () => {\n\n  /* Control the state of the app -> What fields to show */\n  const [state, setState] = useState(0)\n\n  /* Can submit input */\n  const [submit, setSubmit] = useState(false)\n\n  /* Store the inputs of the component */\n  const [input, setInput] = useState<FormInput>({ name: '', email: '', thread: null })\n\n  /* Handle state updates */\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\n    /* Update the state firstly */\n    setInput({...input , [e.target.name]: e.target.value})\n\n    /** \n     *  =========================\n     *        VALIDATION\n     *  =========================\n    */\n    \n    /* Validate name */\n    if(e.target.name === 'name' && e.target.value.length > 2 && e.target.value.length < 25)\n      setSubmit(true)\n\n    /* Validate email */\n    else if(e.target.name === 'email' && e.target.value.match(/\\S+@\\S+\\.\\S+/))\n      setSubmit(true)\n\n    /* Validate thread */\n    else if(e.target.name === 'thread' && e.target.value)\n      setSubmit(true)\n\n    else\n      setSubmit(false)\n  }\n\n  /* Handle submit button updates */\n  const onNext = () => {\n    setState(state+1)\n  }\n\n  const onPrevious = () => {\n    setState(state-1)\n  }\n\n  useEffect(() => {\n    AOS.init()\n  })\n  /**\n   *  =========================\n   *        INPUT NAME\n   *  =========================\n   */\n  if(state === 0){\n\n    /* Disable next button when no name has been provided */\n    !input.name && submit && setSubmit(false)\n\n    return (\n      <InputContainer>\n        <TextInput message='A valid has between 2 and 25 characters' handleUpdate={handleChange} value={input.name} name='name' submit={submit} handleNext={onNext} />\n      </InputContainer>\n    )\n  }\n\n  /**\n   *  =========================\n   *         INPUT EMAIL\n   *  =========================\n   */\n  if(state === 1){\n\n    /* Disable next button when no email has been provided */\n    !input.email && submit && setSubmit(false)\n    input.email && !submit && setSubmit(true)\n\n    return(\n      <InputContainer>\n        <TextInput handleUpdate={handleChange} value={input.email} name='email' submit={submit} handleNext={onNext} />\n      </InputContainer>\n    )\n  }\n\n  /**\n   *  =========================\n   *        THREAT LEVEL\n   *  =========================\n   */\n  if(state === 2){\n\n    !input.thread && submit && setSubmit(false)\n\n    return (\n      <InputContainer>\n        <SelectInput value={input.thread} name=\"thread\" handleUpdate={handleChange} submit={submit} handleNext={onNext} handlePrevious={onPrevious} />\n      </InputContainer>\n    )\n  }\n\n  return (\n    <InputContainer>\n      <Preview back={setState} input={input} />\n    </InputContainer>\n  )\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}